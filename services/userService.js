/* 
serviceRegisteredUser : 거북봇을 사용하는 유저를 가지고 있는 dic
key : this.id 
value : this

this.id = 고유번호
this.name = 이름
this.level = 거북봇 등장 속도 (1 : 낮음, 3 : 높음)
this.NextUpdateTime = 다음 거북봇 등장까지 남은 시간(분)
*/
const libKakaoWork =require('../libs/kakaoWork');
const customModals = require("../modal")

let serviceRegisteredUser = {} 

let unpairedUser = {}

//push user to serviceRegisteredUser
function checkAndAppendUser(user, message){
	if(serviceRegisteredUser[user.id] === undefined){ // check null
		console.log("new user!!");
		appendUser(user);
		// send message to user
		libKakaoWork.sendMessage({
		  conversationId: message.conversation_id,
		  text: '안녕하세요, 친절한 거북씨에요',
		  blocks: customModals.registerCompleteModal.blocks
		});
		
	}else{
		// level update
		serviceRegisteredUser[user.id].level = user.level;
		
		customModals.levelChangeModal.blocks[1].text = "현재 난이도: " + user.level;
		libKakaoWork.sendMessage({
		  conversationId: message.conversation_id,
		  text: '안녕하세요, 친절한 거북씨에요',
		  blocks: customModals.levelChangeModal.blocks
		});
	}
}

function appendUser(user){
	serviceRegisteredUser[user.id] = user;
	unpairedUser[user.id] = user.id;
	// console.log(serviceRegisteredUser);
	// console.log(unpairedUser);
}

//delete user 
function deleteUser(user){
	delete serviceRegisteredUser[user.id];
	delete unpairedUser[user.id];
	// console.log(serviceRegisteredUser);
	// console.log(unpairedUser);
}

//거북이 등장하고 난 뒤 NextUpdateTime 초기화
function initUpdateNextTime(user){
	switch (user.level){
		 case '1' : newuser.NextUpdateTime = Math.round(Math.random() * (60) + 150); break; // 2시간 반 ~ 3시간 반
		 case '2' : newuser.NextUpdateTime = Math.round(Math.random() * (60) + 90); break; // 1시간 반 ~ 2시간 반
		 case '3' : newuser.NextUpdateTime = Math.round(Math.random() * (60) + 30); break; // 30분 ~ 1시간 반
	}
}

function getActiveUserIDList(){
	return serviceRegisteredUser;
}

function getLevelOfUser(user){
	return user.level;
}

function getUnpairedUserIDList(){
	return Object.keys(unpairedUser);
}

//generate random index
function getRandomIndex(range){ 
	return (range * Math.random() << 0)
}

//generate a pair between active users
async function getRandomUserIDList(users){ 
    const randomUserIDList = [users[0]];
	let randomIndex = 0;
	while(randomIndex == 0){
		randomIndex = await getRandomIndex(users.length);
	}
	randomUserIDList.push(users[randomIndex]);

	return randomUserIDList;
}

/**
 * Get a list of unpaired user IDs
 * 
 * Generate a pair between active users
 * if there are more than one person in unpairedUser dictionary
 * 
 * Send messages using conversation IDs generated by user IDs
 */
async function pairingUser(){
	const unpairedUserIDList = getUnpairedUserIDList();
	let selectedPair = []; 
	
	if(unpairedUserIDList.length > 1){ 
		selectedPair = await getRandomUserIDList(unpairedUserIDList);
	}
	if(selectedPair.length){
		console.log(selectedPair);
		delete unpairedUser[selectedPair[0]];
		delete unpairedUser[selectedPair[1]];
		
		const conversations = await Promise.all(
			selectedPair.map((user) => libKakaoWork.openConversations({ userId: user }))
		);
		const messages = await Promise.all(
			conversations.map((conversation) => 
				libKakaoWork.sendMessage({
					conversationId: conversation.id,
					text: '가랏!',
					blocks: customModals.pairingServiceModal.blocks,
				})
			)
		);
	}
}

//Run pairingUser function every interval
setInterval(pairingUser, 10000);

// module.exports.appendUser = appendUser; // does not use outside
module.exports.checkAndAppendUser = checkAndAppendUser;
module.exports.deleteUser = deleteUser;

module.exports.initUpdateNextTime = initUpdateNextTime;
module.exports.getActiveUserIDList = getActiveUserIDList;
module.exports.getLevelOfUser = getLevelOfUser;

